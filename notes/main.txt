Using mysql with node (using mysql npm package): https://www.npmjs.com/package/mysql
Do we also need connector? https://github.com/mysqljs/mysql

Trouble connecting to remote host- probably need auth user: http://stackoverflow.com/a/18821224

Helpful php function testewr:
http://php.fnlist.com/string/sprintf

Useful tips for node-mysql
http://stackoverflow.com/questions/5818312/mysql-with-node-js

Security
-we have helmet installed, but might also want to try https://github.com/krakenjs/lusca (session security?)

OPTIONS


as test of observables: switch 'to top' display from onscroll event to rxjs 'fromEvent' operator
    -will require installing rxjs on fe (use webpack or cdn? - maybe cdn on frontend for now)
    -research cdn usage with webpack- how would i import { fromEvent } from 'rxjs/fromevent' if I'm using a cdn?

follow: https://hackernoon.com/naive-infinite-scroll-in-reactive-programming-using-rxjs-observables-4a605d3146e8#.rpn1525c8

-note their use of pairwise rx operator- is this for better perf than just checking 'onscroll'


    FOR 4/10/17
        REACT FORM VALIDATION:
            -error count as array seems to be working.  look into converting to react style (on state instead of class variable)- but for now, move on to backend validation, try to use same functions
        PAGES LISTING
            -user groups adding/rmoving is completely fucked.  react won't just grab a single element if it's not the first on on click.  taking a break from this.
        SWITCHING TO REACT FORMS
            -pages.ejs, pages.js are close.  Need to add rest of fields to pages modal and populate.  need to add save/update form submissin (check menu items for good sql).  then need to update menu items/page areas on page.js and page.ejs to use the new system.
            -error regarding switching from uncontrolled to controlled- find fix
            -add validation (might need different handleChange functions for each type- required, email, etc)
        SESSIONS
            -on all admin routes- add util function to check req.user - if undefined on request, redirect to login and notifyr session expired
            -works on dash: maybe check user, if undefined, redirect to '/admin' and it will take care of displaying form or dash?
            -max age is currently 1hr.  seems to be working- user is at req.user.  nneed to find out how to only put specific info into that object (currentlypulling all rows from db- including password hash)
        -2) if no menu items on admin, menu div never loads- fix this so that just the 'add menu item' option appears
        -1) migrate admin styles to scss (shouldn't need any user-defined styles)
            a) move to static folder, set up scss transpiler in webpack and get going.
        -1.5) update pages/individual page header to use global.  update everything else to use sidebar, and have content of sidebar custom to each screen (include ejs file)
        0) finish form setup: if action is feature, have checkbox for 'link to specific item', if checked, have drop down with items from that feature only.
            !!!NEXT: checkbox works, but on check add:
                a) filter feature_item list to match feature_id of each feature item.
        1) menu item/page area change order idea:
            -get drag/drop working (rxjs).  when item dragged and dropped in legit zone, run function to;
                a) show loading screen to block further updates
                a.1) store original data-order values?  this would be very useful for a 'revert' option (or server error)
                b) querySelectorAll (menu item or page area) - use .forEach() to set the data-order value on each.
                c) fire db call to update all menu items/page areas (depending on which was updated) with their new order (the updated data order).  query will be similar to the delete menu item function, but won't need to do the -1 math (each menu item/page area will have a unique data-order because it will simply be the order it appears in the dom).
                d) on success, hide loader, notifyr green msg.  on fail, see a.1- if we have the previous data-order for each, revert, hide loader, notifyr red msg.
        5) frontend validation (no blanks, correct data types)
            -put data-required and data-error attrs on your custom elements.  use that in a generic function to check on submit- get all elements with data-required- if not filled out or incorrect entry, don't send and show div with data-error contents next to each

    AFTER THAT
        1) page areas: combine into one?  how to handle sites with multiple already?  and pictures using old insert method?
        
        
    -Next steps for this version (nord-enterprises-node)
        0) admin panel layout: use dash ex in notes folder as template
        0.2) security: on all routes, add check: if req.params.sitename !== session['sitename'], nuke session and redirect to login (someone trying to jump from one hoa to another)
        0.3) ditch captcha on forms- use bot honeypot (hidden form input field that normal user can't find, but bot would automatically fill out- test with this)
        a) basic page structure
            -CURRENTLY: 
                -style header and all permutations
                -move style_main.inc to style-main.ejs and switch out php
                -sanitize html for output?
                    -https://github.com/google/caja/blob/master/src/com/google/caja/plugin/html-sanitizer.js
                    http://stackoverflow.com/questions/295566/sanitize-rewrite-html-on-the-client-side/430240#430240
        b) login with sessions
            -working for admin, but routing needs work.  currently, if go straight to login form, sitename not saved in session.
            -!!!converted password decode from php to js- seems to work, needs more testing
            -logout: seems to work, but cookie remains in browser?  why?
            -on login, check if admin or not (or feature mng/pagemng)- allow access based on this level
        c) cron jobs (for oldl event removal, event reminders, etc)
            -https://help.ubuntu.com/community/CronHowto
        d) minify and concatenate all css/js files?  set up webpack maybe or just use gulp?
        e) production build
            -https://expressjs.com/en/advanced/best-practice-performance.html
            -node module: forever to keep it running
            -host on aws elastic beanstalk?  (load balancing, crash mitigation, etc)
            -csp: https://ponyfoo.com/articles/content-security-policy-in-express-apps?utm_source=nodeweekly&utm_medium=email
        f) ssl - use let's encrypt
            -https://medium.com/@yash.kulshrestha/using-lets-encrypt-with-express-e069c7abe625#.g8hyhokjf
            -but will it work with external domains feeding to my server?  test this!
            -or, use AV's method.  anytime going to a login form, redirect to 'secure.home-owners-assoc.com' with the end site's name/domain as a param.  set the 'secure' subdomain to use https always and it should protect the login form.  after that, go back to their domain with no https?

    -NOTES FOR THIS PROJECT
        https://github.com/mde/ejs
        https://codeforgeek.com/2014/09/manage-session-using-node-js-express-4/
        https://coligo.io/templating-node-and-express-apps-with-ejs/

        Use for sessions:
            https://github.com/expressjs/session
            for production stores: https://www.npmjs.com/package/express-mysql-session



TO READ FROM 2/17
https://scotch.io/tutorials/building-a-morphing-hamburger-menu-with-css?utm_source=frontendfocus&utm_medium=email

https://www.sitepoint.com/beginners-guide-to-webpack-2-and-module-bundling/?utm_source=frontendfocus&utm_medium=email

https://appendto.com/2017/01/react-events-101/?utm_source=reactnl&utm_medium=email
