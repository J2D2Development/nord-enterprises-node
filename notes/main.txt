Using mysql with node (using mysql npm package): https://www.npmjs.com/package/mysql
Do we also need connector? https://github.com/mysqljs/mysql

Trouble connecting to remote host- probably need auth user: http://stackoverflow.com/a/18821224

Helpful php function testewr:
http://php.fnlist.com/string/sprintf

Useful tips for node-mysql
http://stackoverflow.com/questions/5818312/mysql-with-node-js

Security
-we have helmet installed, but might also want to try https://github.com/krakenjs/lusca (session security?)

OPTIONS

1) Node/Express as backend (node-mysql to connect to db).  EJS as templating engine.  Would need mailgun as email provider (possibly around $200-300/month). Security?  Does node handle cookies?  I think so, but if not, would need to go jwt
    -Next steps for this version (nord-enterprises-node)
        0) admin panel layout: use 'themepanda-freebie' as template
        0.1) link up admin nav- create new file for admin routes (then a file each for main tabs for those sub routes and include all into server.js)
            -!!!next: on page admin route: change page list into drop down at top.  render out lnf and all content of page on admin panel.  should links be clickable to edit those as well?  do we render out features too?
                -basic lnf rendering on 'page' admin route- need to get menu items and page areas, then features, disable links and have click on any item be an 'edit' (put icon for edit on any editable area- on click, go to edit route or show modal to edit?)
        0.2) security: on all routes, add check: if req.params.sitename !== session['sitename'], nuke session and redirect to login (someone trying to jump from one hoa to another)
        a) basic page structure
            -get hoa_main- save proper vars in session (get from old codebase)
            -get hoa_lookfeel- apply
            -set up html structure using ejs templates and includes
            -CURRENTLY: 
                -style header and all permutations
                -move style_main.inc to style-main.ejs and switch out php
                -sanitize html for output?
                    -https://github.com/google/caja/blob/master/src/com/google/caja/plugin/html-sanitizer.js
                    http://stackoverflow.com/questions/295566/sanitize-rewrite-html-on-the-client-side/430240#430240
        b) login with sessions
            -working for admin, but routing needs work.  currently, if go straight to login form, sitename not saved in session.
            -!!!converted password decode from php to js- seems to work, needs more testing
            -logout: seems to work, but cookie remains in browser?  why?
            -on login, check if admin or not (or feature mng/pagemng)- allow access based on this level
        c) cron jobs (for oldl event removal, event reminders, etc)
            -https://help.ubuntu.com/community/CronHowto
        d) minify and concatenate all css/js files?  set up webpack maybe or just use gulp?
        e) production build
            -https://expressjs.com/en/advanced/best-practice-performance.html
            -node module: forever to keep it running
            -host on aws elastic beanstalk?  (load balancing, crash mitigation, etc)
        f) ssl - use let's encrypt
            -https://medium.com/@yash.kulshrestha/using-lets-encrypt-with-express-e069c7abe625#.g8hyhokjf
            -but will it work with external domains feeding to my server?  test this!
            -or, use AV's method.  anytime going to a login form, redirect to 'secure.home-owners-assoc.com' with the end site's name/domain as a param.  set the 'secure' subdomain to use https always and it should protect the login form.  after that, go back to their domain with no https?

    -NOTES FOR THIS PROJECT
        https://github.com/mde/ejs
        https://codeforgeek.com/2014/09/manage-session-using-node-js-express-4/
        https://coligo.io/templating-node-and-express-apps-with-ejs/

        Use for sessions:
            https://github.com/expressjs/session
            for production stores: https://www.npmjs.com/package/express-mysql-session




2) Python/Django as backend.  Includes templating, password (would it work with existing db?) and mail functions (could integrate with more 'real' option like mailgun later).
    -Next steps for this version (no folder yet)
        a) create folder
        b) set up latest version of Django (may have to update desktop and laptop)
        c) start dev server and try to set up homepage routing (use urls.py for regex routes)


TO READ FROM 2/17
https://scotch.io/tutorials/building-a-morphing-hamburger-menu-with-css?utm_source=frontendfocus&utm_medium=email

https://www.sitepoint.com/beginners-guide-to-webpack-2-and-module-bundling/?utm_source=frontendfocus&utm_medium=email

https://appendto.com/2017/01/react-events-101/?utm_source=reactnl&utm_medium=email


NOTES FROM 2/17

REMOVED FROM INDEX (should no longer be necessary)
<!--This file is necessary for graphic menu items to work!-->
<script src="../static/js/overlib_mini.js"></script>
<!--Not sure on this one <script src="scripts/<?php print $pageutils ?>"></script>-->
<script src="../static/js/jquery.bgiframe.js"></script>
<script src="../static/js/jquery.dimensions.js"></script>

php function to conver old mysql323 password hash
function mysql_old_password_hash($input, $hex = true)
{
  $nr = 1345345333; $add = 7; $nr2 = 0x12345671; $tmp = null;
  $inlen = strlen($input);
  for ($i = 0; $i < $inlen; $i++) {
    $byte = substr($input, $i, 1);
    if ($byte == ' ' || $byte == "\t") continue;
    $tmp = ord($byte);
    $nr ^= ((($nr & 63) + $add) * $tmp) + (($nr << 8) & 0xFFFFFFFF);
    $nr2 += (($nr2 << 8) & 0xFFFFFFFF) ^ $nr;
    $add += $tmp;
  }
  $out_a = $nr & ((1 << 31) - 1);
  $out_b = $nr2 & ((1 << 31) - 1);
  $output = sprintf("%08x%08x", $out_a, $out_b);
  if ($hex) return $output;
  return hex_hash_to_bin($output);
}

var sprintfJs = require("sprintf-js").sprintf;

function mysql_old_password_decode(password, hash) {
    let nr = 1345345333, add = 7, nr2 = 0x12345671, tmp = null;
    const inlen = password.length;
    for (let i = 0; i < inlen; i += 1) {
        let byte = password.substring(i, i+1);
        if (byte === ' ' || byte === "\t") continue;
        tmp = byte.charCodeAt(0);
        nr ^= (((nr & 63) + add) * tmp) + ((nr << 8) & 0xFFFFFFFF);
        nr2 += ((nr2 << 8) & 0xFFFFFFFF) ^ nr;
        add += tmp;
    }
    const out_a = nr & ((1 << 31) - 1);
    const out_b = nr2 & ((1 << 31) - 1);
    const output = sprintfJs("%08x%08x", out_a, out_b);
    return output === hash;
}

mysql_old_password_decode('654321a', '0ba03e4f53f18469');
