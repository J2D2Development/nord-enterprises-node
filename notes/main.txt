Using mysql with node (using mysql npm package): https://www.npmjs.com/package/mysql
Do we also need connector? https://github.com/mysqljs/mysql

Trouble connecting to remote host- probably need auth user: http://stackoverflow.com/a/18821224

Helpful php function testewr:
http://php.fnlist.com/string/sprintf

Useful tips for node-mysql
http://stackoverflow.com/questions/5818312/mysql-with-node-js

Security
-we have helmet installed, but might also want to try https://github.com/krakenjs/lusca (session security?)

OPTIONS


1) Node/Express as backend (node-mysql to connect to db).  EJS as templating engine.  Would need mailgun as email provider (possibly around $200-300/month). Security?  Does node handle cookies?  I think so, but if not, would need to go jwt
    FOR 3/20/17
        SESSIONS
            -max age is currently 1hr.  seems to be working- user is at req.user.  need to add auth to all admin routes with this.  also need to update the updt_user call to use req.user.  also need to find out how to only put specific info into that object (currentlypulling all rows from db- including password hash)
        -2) if no menu items on admin, menu div never loads- fix this so that just the 'add menu item' option appears
        -1) migrate admin styles to scss (shouldn't need any user-defined styles)
            a) move to static folder, set up scss transpiler in webpack and get going.
        -1.5) update pages/individual page header to use global.  update everything else to use sidebar, and have content of sidebar custom to each screen (include ejs file)
        0) finish form setup: if action is feature, have checkbox for 'link to specific item', if checked, have drop down with items from that feature only.
            !!!NEXT: checkbox works, but on check add:
                a) filter feature_item list to match feature_id of each feature item.
        1) menu item/page area change order idea:
            -get drag/drop working (rxjs).  when item dragged and dropped in legit zone, run function to;
                a) show loading screen to block further updates
                a.1) store original data-order values?  this would be very useful for a 'revert' option (or server error)
                b) querySelectorAll (menu item or page area) - use .forEach() to set the data-order value on each.
                c) fire db call to update all menu items/page areas (depending on which was updated) with their new order (the updated data order).  query will be similar to the delete menu item function, but won't need to do the -1 math (each menu item/page area will have a unique data-order because it will simply be the order it appears in the dom).
                d) on success, hide loader, notifyr green msg.  on fail, see a.1- if we have the previous data-order for each, revert, hide loader, notifyr red msg.
        5) frontend validation (no blanks, correct data types)
            -put data-required and data-error attrs on your custom elements.  use that in a generic function to check on submit- get all elements with data-required- if not filled out or incorrect entry, don't send and show div with data-error contents next to each

    AFTER THAT
        0) continue with moving script at bottom of pages.ejs to js bundle.  need to make the modal work with data pulled from the menu item clicked.
        1) page areas: combine into one?  how to handle sites with multiple already?  and pictures using old insert method?
        
        
    -Next steps for this version (nord-enterprises-node)
        0) admin panel layout: use dash ex in notes folder as template
        0.2) security: on all routes, add check: if req.params.sitename !== session['sitename'], nuke session and redirect to login (someone trying to jump from one hoa to another)
        0.3) ditch captcha on forms- use bot honeypot (hidden form input field that normal user can't find, but bot would automatically fill out- test with this)
        a) basic page structure
            -get hoa_main- save proper vars in session (get from old codebase)
            -get hoa_lookfeel- apply
            -set up html structure using ejs templates and includes
            -CURRENTLY: 
                -style header and all permutations
                -move style_main.inc to style-main.ejs and switch out php
                -sanitize html for output?
                    -https://github.com/google/caja/blob/master/src/com/google/caja/plugin/html-sanitizer.js
                    http://stackoverflow.com/questions/295566/sanitize-rewrite-html-on-the-client-side/430240#430240
        b) login with sessions
            -working for admin, but routing needs work.  currently, if go straight to login form, sitename not saved in session.
            -!!!converted password decode from php to js- seems to work, needs more testing
            -logout: seems to work, but cookie remains in browser?  why?
            -on login, check if admin or not (or feature mng/pagemng)- allow access based on this level
        c) cron jobs (for oldl event removal, event reminders, etc)
            -https://help.ubuntu.com/community/CronHowto
        d) minify and concatenate all css/js files?  set up webpack maybe or just use gulp?
        e) production build
            -https://expressjs.com/en/advanced/best-practice-performance.html
            -node module: forever to keep it running
            -host on aws elastic beanstalk?  (load balancing, crash mitigation, etc)
        f) ssl - use let's encrypt
            -https://medium.com/@yash.kulshrestha/using-lets-encrypt-with-express-e069c7abe625#.g8hyhokjf
            -but will it work with external domains feeding to my server?  test this!
            -or, use AV's method.  anytime going to a login form, redirect to 'secure.home-owners-assoc.com' with the end site's name/domain as a param.  set the 'secure' subdomain to use https always and it should protect the login form.  after that, go back to their domain with no https?

    -NOTES FOR THIS PROJECT
        https://github.com/mde/ejs
        https://codeforgeek.com/2014/09/manage-session-using-node-js-express-4/
        https://coligo.io/templating-node-and-express-apps-with-ejs/

        Use for sessions:
            https://github.com/expressjs/session
            for production stores: https://www.npmjs.com/package/express-mysql-session




2) Python/Django as backend.  Includes templating, password (would it work with existing db?) and mail functions (could integrate with more 'real' option like mailgun later).
    -Next steps for this version (no folder yet)
        a) create folder
        b) set up latest version of Django (may have to update desktop and laptop)
        c) start dev server and try to set up homepage routing (use urls.py for regex routes)


TO READ FROM 2/17
https://scotch.io/tutorials/building-a-morphing-hamburger-menu-with-css?utm_source=frontendfocus&utm_medium=email

https://www.sitepoint.com/beginners-guide-to-webpack-2-and-module-bundling/?utm_source=frontendfocus&utm_medium=email

https://appendto.com/2017/01/react-events-101/?utm_source=reactnl&utm_medium=email


NOTES FROM 2/17

REMOVED FROM INDEX (should no longer be necessary)
<!--This file is necessary for graphic menu items to work!-->
<script src="../static/js/overlib_mini.js"></script>
<!--Not sure on this one <script src="scripts/<?php print $pageutils ?>"></script>-->
<script src="../static/js/jquery.bgiframe.js"></script>
<script src="../static/js/jquery.dimensions.js"></script>

php function to conver old mysql323 password hash
function mysql_old_password_hash($input, $hex = true)
{
  $nr = 1345345333; $add = 7; $nr2 = 0x12345671; $tmp = null;
  $inlen = strlen($input);
  for ($i = 0; $i < $inlen; $i++) {
    $byte = substr($input, $i, 1);
    if ($byte == ' ' || $byte == "\t") continue;
    $tmp = ord($byte);
    $nr ^= ((($nr & 63) + $add) * $tmp) + (($nr << 8) & 0xFFFFFFFF);
    $nr2 += (($nr2 << 8) & 0xFFFFFFFF) ^ $nr;
    $add += $tmp;
  }
  $out_a = $nr & ((1 << 31) - 1);
  $out_b = $nr2 & ((1 << 31) - 1);
  $output = sprintf("%08x%08x", $out_a, $out_b);
  if ($hex) return $output;
  return hex_hash_to_bin($output);
}

var sprintfJs = require("sprintf-js").sprintf;

function mysql_old_password_decode(password, hash) {
    let nr = 1345345333, add = 7, nr2 = 0x12345671, tmp = null;
    const inlen = password.length;
    for (let i = 0; i < inlen; i += 1) {
        let byte = password.substring(i, i+1);
        if (byte === ' ' || byte === "\t") continue;
        tmp = byte.charCodeAt(0);
        nr ^= (((nr & 63) + add) * tmp) + ((nr << 8) & 0xFFFFFFFF);
        nr2 += ((nr2 << 8) & 0xFFFFFFFF) ^ nr;
        add += tmp;
    }
    const out_a = nr & ((1 << 31) - 1);
    const out_b = nr2 & ((1 << 31) - 1);
    const output = sprintfJs("%08x%08x", out_a, out_b);
    return output === hash;
}

mysql_old_password_decode('654321a', '0ba03e4f53f18469');
